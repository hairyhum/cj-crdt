Data structure:


Lists: 
  dt: orswot(id)
  data: [List]

List: persistent value
  id
  name: lwwregister
  position: lwwregister
  added-items: pnset(Item)
  bought-items: pnset(Item)

  add_item: add to items
  buy_item: add to bought
  unbuy_item: delete, add
  update_item: delete, add


Item: immutable value
  id
  title
  amount
  position


UniqueItems: 
  dt: orswot(id)
  data: [UniqueItem]

UniqueItem:
  title: id
  group_id: lwwregister
  last_use: maxcounter
  use_count: gcounter
  permanent: const


Data sync:

1. Current data structure: C
2. Sync image: I
3. Server state: S
4. Synchronizing state: Is

Persistent data marked by indexes. (C1, I0 ...)

Get data:

S = load_s(), 
I1 = merge(I0, S),
C1 = merge(C0, I1)

Send data:

Is = C1 = merge_compress(I0, C0),
case send_i(Is) of
  ok -> 
    I1 = merge(I0, Is);
  {not_ok, Err} ->
    C1 = resolve(Is, Err)
end

resolve(State, Err) - resolve specific error, changing state
merge_compress(A, B) - merge A with changes from B which is not local to B

merge(A, B) === merge(B, A)
merge(A, A) === A



